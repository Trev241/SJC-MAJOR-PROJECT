# SCRIPT TO INITIALIZE DATABASE

import re
import pandas as pd
import sqlite3

conn = sqlite3.connect('country_statistics.db')

# ---------------
# CREATING TABLES
# ---------------

# Creating COUNTRY table
columns = [
    'id INTEGER PRIMARY KEY AUTOINCREMENT',
    'un_code INTEGER(2) UNIQUE NOT NULL',
    'iso_alpha_2_code CHAR(2) UNIQUE NOT NULL',
    'iso_alpha_3_code CHAR(3) UNIQUE NOT NULL',
    'name VARCHAR(32) NOT NULL'
]
command = f'CREATE TABLE country ({",".join(columns)})'
conn.execute(command)

# Creating ECONOMIC_INDICATOR table
columns = [
    'id INTEGER PRIMARY KEY AUTOINCREMENT',
    'short_name VARCHAR(16) NOT NULL',
    'name VARCHAR(32) NOT NULL',
    'description VARCHAR(128)'
]
command = f'CREATE TABLE economic_indicator ({",".join(columns)})'
conn.execute(command)

# Creating COUNTRY_INDICATOR_VALUE table
columns = [
    'id INTEGER PRIMARY KEY AUTOINCREMENT',
    'country_id INTEGER',
    'indicator_id INTEGER',
    'year INTEGER(2)',
    'value FLOAT',
    'FOREIGN KEY (country_id) REFERENCES country(id)',
    'FOREIGN KEY (indicator_id) REFERENCES economic_indicator(id)'
]
command = f'CREATE TABLE country_indicator_value ({",".join(columns)})'
conn.execute(command)

# --------------
# INSERTING DATA
#---------------

# TODO: Inserting data about all countries

file = open('data/Countries.txt','r')
read = file.readlines()
countries = list()
for line in read:
    Countries = re.search("[A-Z].+",line)
   
    x = re.split(",",Countries.group())
    
    UNcode = x[3]
    Alpha2 = x[1]
    Alpha3 = x[2]
    Name  = x[0]

    command = f'INSERT INTO country (un_code,iso_alpha_2_code,iso_alpha_3_code,name) VALUES("{UNcode}", "{Alpha2}", "{Alpha3}", "{Name}")'
    conn.execute(command)


# Preparing data about all economic income indicators
indicators = [
    '"GFCF", "Gross Fixed Capital Formation", "The acquisition of produced assets (including purchases of second-hand assets), including the production of such assets by producers for their own use, minus disposals."',
    '"DCRED", "Domestic Credit", "Credit to various sectors on a gross basis (except credit to the central government, which is net), expressed as a percentage of GDP."',
    '"GDPPC", "Gross Domestic Product Per Capita", "GDP in a particular period divided by the total population in the same period."',
    '"GDP", "Gross Domestic Product", "Sum of gross value added by all resident producers in the economy plus any product taxes and minus any subsidies not included in the value of the products, expressed in 2011 international dollars using purchasing power parity (PPP) rates."',
    '"GNI(F)", "Gross National Income (Female)", "Derived from the ratio of female to male wages, female and male shares of economically active population and gross national income (in 2011 purchasing power parity terms)."',
    '"GNI(M)", "Gross National Income (Male", "Derived from the ratio of female to male wages, female and male shares of economically active population and gross national income (in 2011 purchasing power parity terms)."',
    '"LS", "Labour Share", "Total compensation of employees given as a percent of GDP, which is a measure of total output. Total compensation refers to the total remuneration, in cash or in kind, payable by an enterprise to an employee in return for work done by the latter during the accounting period."',
    '"GNIPC", "Gross National Income Per Capita", "Aggregate income of an economy generated by its production and its ownership of factors of production, less the incomes paid for the use of factors of production owned by the rest of the world, converted to international dollars using PPP rates, divided by midyear population."',
    '"II", "Income Index", "GNI per capita (2011 PPP International $, using natural logarithm) expressed as an index using a minimum value of $100 and a maximum value $75,000."'
]

# Inserting the data
for indicator in indicators:
    command = f'INSERT INTO economic_indicator (short_name, name, description) VALUES ({indicator})'
    conn.execute(command)

# Prepare values of economic indicators to be added
RESOURCES = {
    'GFCF': 'capital_formation.csv',
    'DCRED': 'domestic_credits.csv',
    'GDPPC': 'gdp_per_capita.csv',
    'GDP': 'gdp.csv',
    'GNI(F)': 'gni_female.csv',
    'GNI(M)': 'gni_male.csv',
    'GNIPC': 'gni_per_capita.csv',
    'II': 'income_index.csv',
    'LS': 'labour_share.csv'
}

values = list()

for name, file in RESOURCES.items():
    data = pd.read_csv(f'data/{file}')
    data.set_index(['Country'], inplace=True)

    cur = conn.cursor()
    
    # Fetch indicator id    
    cur.execute(f'SELECT id FROM economic_indicator WHERE short_name="{name}"')
    indicator_id = cur.fetchone()[0]

    years = data.columns[1:]

    for row in data.itertuples():
        # Fetch country id
        cur.execute(f'SELECT id FROM country WHERE name="{row[0]}"')
        matches = cur.fetchone()
        
        if matches:
            country_id = matches[0]
            # Prepare values as list
            # values += ((country_id, indicator_id, int(year), float(row[i+1])) for i, year in enumerate(years))
            for i,year in enumerate(years):
                try:
                    value = float(row[i+1])
                    values = f'{country_id},{indicator_id},{int(year)},{value}'
                    # Insert values
                    command = f'INSERT INTO country_indicator_value (country_id, indicator_id, year, value) VALUES ({values})'
                    conn.execute(command)
                except Exception as e:
                    print(e)

        else:
            print(f'Could not find ID for {row[0]}! Data excluded from migration')

conn.commit()